--- /scratch/fall2017/31/linux-yocto-3.19/block/Kconfig.iosched	2017-10-30 19:16:45.830143816 -0700
+++ /scratch/fall2017/31/new_assig2/linux-yocto-3.19/block/Kconfig.iosched	2017-10-28 21:03:55.403882778 -0700
@@ -2,6 +2,12 @@
 
 menu "IO Schedulers"
 
+config IOSCHED_SSTF
+	tristate "SSTF SCHEDULER"
+	default y
+	---help---
+		SSTF Scheduler
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -13,7 +19,7 @@
 	  the kernel.
 
 config IOSCHED_DEADLINE
-	bool "Deadline I/O scheduler"
+	tristate "Deadline I/O scheduler"
 	default y
 	---help---
 	  The deadline I/O scheduler is simple and compact. It will provide
@@ -22,7 +28,7 @@
 	  in case of expiry.
 
 config IOSCHED_CFQ
-	bool "CFQ I/O scheduler"
+	tristate "CFQ I/O scheduler"
 	default y
 	---help---
 	  The CFQ I/O scheduler tries to distribute bandwidth equally
@@ -41,7 +47,7 @@
 
 choice
 	prompt "Default I/O scheduler"
-	default DEFAULT_SSTF
+	default DEFAULT_CFQ
 	help
 	  Select the I/O scheduler which will be used by default for all
 	  block devices.
@@ -53,7 +59,11 @@
 		bool "CFQ" if IOSCHED_CFQ=y
 
 	config DEFAULT_NOOP
-		bool "No-op" if IOSCHED_NOOP=y
+		bool "No-op"
+	
+	config 	DEFAULT_SSTF
+		bool "SSTF" if IOSCHED_SSTF=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -61,6 +71,7 @@
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
--- /scratch/fall2017/31/linux-yocto-3.19/block/Makefile	2017-10-30 19:16:57.674348934 -0700
+++ /scratch/fall2017/31/new_assig2/linux-yocto-3.19/block/Makefile	2017-10-28 20:23:01.400388106 -0700
@@ -19,6 +19,7 @@
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o t10-pi.o
--- /scratch/fall2017/31/linux-yocto-3.19/block/sstf-iosched.c	2017-10-30 19:17:31.141928525 -0700
+++ /scratch/fall2017/31/new_assig2/linux-yocto-3.19/block/sstf-iosched.c	2017-10-30 19:21:49.967407633 -0700
@@ -1,5 +1,5 @@
 /*
- * elevator noop
+ * elevator sstf
  */
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
@@ -8,41 +8,78 @@
 #include <linux/slab.h>
 #include <linux/init.h>
 
-struct noop_data {
+struct sstf_data {
 	struct list_head queue;
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
 				 struct request *next)
 {
 	list_del_init(&next->queuelist);
 }
 
-static int noop_dispatch(struct request_queue *q, int force)
+static int sstf_dispatch(struct request_queue *q, int force)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (!list_empty(&nd->queue)) {
-		struct request *rq;
+		struct request *rq;//located in blkdev, this is the item we are sorting
 		rq = list_entry(nd->queue.next, struct request, queuelist);
-		list_del_init(&rq->queuelist);
+		list_del_init(&rq->queuelist);//this function deletes entry from list and reinitializes it.
 		elv_dispatch_sort(q, rq);
 		return 1;
 	}
 	return 0;
 }
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
+static void sstf_add_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
-	list_add_tail(&rq->queuelist, &nd->queue);
+	struct list_head *iterator = NULL; //set up an iterator
+	struct list_head *printer = NULL;
+
+	int i=0;
+
+	if(!list_empty(&nd->queue)){
+		struct request *previous = list_entry(nd->queue.prev, struct request, queuelist);
+		/*list_for_each(iterator, &nd->queue){
+			struct request *temp = list_entry(iterator, struct request, queuelist);
+			previous = list_entry(previous->queuelist.prev, struct request, queuelist);
+			i = i + 1;
+			if(blk_rq_pos(rq)<blk_rq_pos(temp)){//We want the list to be ordered
+		   		list_add(&rq->queuelist, &previous->queuelist);//add the element in the location immediately  before the first value it is larger than
+		   		printk("ADDING REQUEST TO POSITION %d IN QUEUE\n", i);
+		   		break;
+			}
+			if(temp->queuelist.next == &nd->queue){
+			   	list_add_tail(&rq->queuelist, &nd->queue);	
+				printk("ADDED REQUEST TO END OF QUEUE");
+				
+			}
+		}*/ /*THIS WAS A FIRST ATTEMPT AT THE ALGO IT CAN BE SIMPLIFIED GREATLY WITH THE TWO LINES BELOW"*/
+		while(blk_rq_pos(rq) < blk_rq_pos(previous)){
+		   	previous = list_entry(previous->queuelist.prev, struct request, queuelist);
+		}
+		list_add(&rq->queuelist, &previous->queuelist);
+			
+	}
+	if(list_empty(&nd->queue)){
+		printk("EMPTY LIST... ADDING TO TAIL AS DEFAULT\n");
+		list_add(&rq->queuelist, &nd->queue);
+	}
+
+	printk("REQUEST QUEUE: ");
+	list_for_each(printer,&nd->queue){
+	   struct request *printed=list_entry(printer, struct request, queuelist);
+	   printk(" %llu\n", blk_rq_pos(printed));
+	}
 }
 
 static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+sstf_former_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.prev == &nd->queue)
 		return NULL;
@@ -50,18 +87,18 @@
 }
 
 static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+sstf_latter_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.next == &nd->queue)
 		return NULL;
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
 {
-	struct noop_data *nd;
+	struct sstf_data *nd;
 	struct elevator_queue *eq;
 
 	eq = elevator_alloc(q, e);
@@ -83,40 +120,40 @@
 	return 0;
 }
 
-static void noop_exit_queue(struct elevator_queue *e)
+static void sstf_exit_queue(struct elevator_queue *e)
 {
-	struct noop_data *nd = e->elevator_data;
+	struct sstf_data *nd = e->elevator_data;
 
 	BUG_ON(!list_empty(&nd->queue));
 	kfree(nd);
 }
 
-static struct elevator_type elevator_noop = {
+static struct elevator_type elevator_sstf = {
 	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
 	},
-	.elevator_name = "noop",
+	.elevator_name = "sstf",
 	.elevator_owner = THIS_MODULE,
 };
 
-static int __init noop_init(void)
+static int __init sstf_init(void)
 {
-	return elv_register(&elevator_noop);
+	return elv_register(&elevator_sstf);
 }
 
-static void __exit noop_exit(void)
+static void __exit sstf_exit(void)
 {
-	elv_unregister(&elevator_noop);
+	elv_unregister(&elevator_sstf);
 }
 
-module_init(noop_init);
-module_exit(noop_exit);
+module_init(sstf_init);
+module_exit(sstf_exit);
 
 
 MODULE_AUTHOR("Jens Axboe");
