--- /scratch/fall2017/31/linux-yocto-3.19/drivers/block/Kconfig	2017-11-15 19:50:53.745876864 -0800
+++ /scratch/fall2017/31/new_assig3/linux-yocto-3.19/drivers/block/Kconfig	2017-11-11 02:52:25.749531201 -0800
@@ -41,6 +41,13 @@
 	tristate "Atari floppy support"
 	depends on ATARI
 
+config TJMCA3_RD
+	tristate "Assignment 3 implementation for CS44"
+	default m
+	depends on BLK_DEV_CRYPTOLOOP
+	help
+	  This is the test implementation of CS44 RAM disk driver
+
 config MAC_FLOPPY
 	tristate "Support for PowerMac floppy"
 	depends on PPC_PMAC && !PPC_PMAC64
--- /scratch/fall2017/31/linux-yocto-3.19/drivers/block/Makefile	2017-11-15 19:48:44.259642281 -0800
+++ /scratch/fall2017/31/new_assig3/linux-yocto-3.19/drivers/block/Makefile	2017-11-13 11:19:10.273333563 -0800
@@ -34,6 +34,8 @@
 obj-$(CONFIG_BLK_DEV_SX8)	+= sx8.o
 obj-$(CONFIG_BLK_DEV_HD)	+= hd.o
 
+obj-$(CONFIG_TJMCA3_RD)	+= tjmc_a3.o
+
 obj-$(CONFIG_XEN_BLKDEV_FRONTEND)	+= xen-blkfront.o
 obj-$(CONFIG_XEN_BLKDEV_BACKEND)	+= xen-blkback/
 obj-$(CONFIG_BLK_DEV_DRBD)     += drbd/
@@ -47,3 +49,7 @@
 nvme-y		:= nvme-core.o nvme-scsi.o
 skd-y		:= skd_main.o
 swim_mod-y	:= swim.o swim_asm.o
+
+
+
+
--- /scratch/fall2017/31/linux-yocto-3.19/drivers/block/tjmc_a3.c	2017-11-15 19:55:30.679676682 -0800
+++ /scratch/fall2017/31/new_assig3/linux-yocto-3.19/drivers/block/tjmc_a3.c	2017-11-12 19:20:29.004698610 -0800
@@ -0,0 +1,224 @@
+/*
+ * A sample, extra-simple block driver. Updated for kernel 2.6.31.
+ *
+ * (C) 2003 Eklektix, Inc.
+ * (C) 2010 Pat Patterson <pat at superpat dot com>
+ * Redistributable under the terms of the GNU GPL.
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+
+#include <linux/kernel.h> /* printk() */
+#include <linux/fs.h>     /* everything... */
+#include <linux/errno.h>  /* error codes */
+#include <linux/types.h>  /* size_t */
+#include <linux/vmalloc.h>
+#include <linux/genhd.h>
+#include <linux/blkdev.h>
+#include <linux/hdreg.h>
+#include <linux/crypto.h>
+#include <linux/scatterlist.h>
+
+MODULE_LICENSE("Dual BSD/GPL");
+static char *Version = "1.4";
+
+static int major_num = 0;
+module_param(major_num, int, 0);
+static int logical_block_size = 512;
+module_param(logical_block_size, int, 0);
+static int nsectors = 1024; /* How big the drive is */
+module_param(nsectors, int, 0);
+
+/*
+ * We can tweak our hardware sector size, but the kernel talks to us
+ * in terms of small sectors, always.
+ */
+#define KERNEL_SECTOR_SIZE 512
+
+/*
+ * Our request queue.
+ */
+static struct request_queue *Queue;
+
+//struct for crypto 
+static inline struct cipher_handle;
+/*
+ * The internal representation of our device.
+ */
+static struct sbd_device {
+	unsigned long size;
+	spinlock_t lock;
+	u8 *data;
+	struct gendisk *gd;
+} Device;
+
+/*
+ * Handle an I/O request.
+ */
+static void sbd_transfer(struct sbd_device *dev, sector_t sector,
+		unsigned long nsect, char *buffer, int write) {
+	unsigned long offset = sector * logical_block_size;
+	unsigned long nbytes = nsect * logical_block_size;
+	unsigned char key[32];
+	int i;
+
+	//setting the key for the cipher
+	get_random_bytes(&key, 32);
+	if(crypto_cipher_setkey(cipher_handle, key, 32)){
+	   pr_info("error when trying to set key\n");
+	   printk("error setting key\n");
+	   goto out;
+
+	}
+
+	if ((offset + nbytes) > dev->size) {
+		printk (KERN_NOTICE "sbd: Beyond-end write (%ld %ld)\n", offset, nbytes);
+		return;
+	}
+	if (write){
+	//	memcpy(dev->data + offset, buffer, nbytes);
+		for(i = 0; i < nbytes ; i+= crypto_cipher_blocksize(cipher_handle) ){
+		crypto_cipher_encrypt_one(cipher_handle,dev->data+offset+i, buffer+i);//encrypting one block at a time
+
+		printk("without: \n");
+		data_view(dev->data+offset, nbytes);
+		printk("with: \n");
+		data_view(buffer, nbytes);
+
+		}
+	}
+	else{
+		//memcpy(buffer, dev->data + offset, nbytes);
+		for(i = 0 ; i < nbytes ; i += crypto_cipher_blocksize(cipher_handle)){
+	
+		   crypto_cipher_decrypt_one(cipher_handle, buffer+i, dev->data + offset +i);
+		}
+
+		printk("without: \n");
+		data_view(buffer, nbytes);
+		printk("with: \n");
+		data_view(dev->data+offset, nbytes);
+
+		}
+	}
+}	
+
+static void sbd_request(struct request_queue *q) {
+	struct request *req;
+
+	req = blk_fetch_request(q);
+	while (req != NULL) {
+		// blk_fs_request() was removed in 2.6.36 - many thanks to
+		// Christian Paro for the heads up and fix...
+		//if (!blk_fs_request(req)) {
+		if (req == NULL || (req->cmd_type != REQ_TYPE_FS)) {
+			printk (KERN_NOTICE "Skip non-CMD request\n");
+			__blk_end_request_all(req, -EIO);
+			continue;
+		}
+		sbd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
+				bio_data(req->bio), rq_data_dir(req));
+		if ( ! __blk_end_request_cur(req, 0) ) {
+			req = blk_fetch_request(q);
+		}
+	}
+}
+
+/*
+ * The HDIO_GETGEO ioctl is handled in blkdev_ioctl(), which
+ * calls this. We need to implement getgeo, since we can't
+ * use tools such as fdisk to partition the drive otherwise.
+ */
+int sbd_getgeo(struct block_device * block_device, struct hd_geometry * geo) {
+	long size;
+
+	/* We have no real geometry, of course, so make something up. */
+	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+	geo->cylinders = (size & ~0x3f) >> 6;
+	geo->heads = 4;
+	geo->sectors = 16;
+	geo->start = 0;
+	return 0;
+}
+
+/*
+ * The device operations structure.
+ */
+static struct block_device_operations sbd_ops = {
+		.owner  = THIS_MODULE,
+		.getgeo = sbd_getgeo
+};
+
+static int __init sbd_init(void) {
+	/*
+	 * Set up our internal device.
+	 */
+	Device.size = nsectors * logical_block_size;
+	spin_lock_init(&Device.lock);
+	Device.data = vmalloc(Device.size);
+	////////////////
+	cipher_handle = crypto_alloc_cipher("aes", 0, 0);
+	if(IS_ERR(cipher_handle)){
+	   pr_err("error allocating cipher handle\n");
+	   return PTR_ERR(cipher_handle);
+	   //do something?
+	}
+
+	////////////////
+	if (Device.data == NULL)
+		return -ENOMEM;
+	/*
+	 * Get a request queue.
+	 */
+	Queue = blk_init_queue(sbd_request, &Device.lock);
+	if (Queue == NULL)
+		goto out;
+	blk_queue_logical_block_size(Queue, logical_block_size);
+	/*
+	 * Get registered.
+	 */
+	major_num = register_blkdev(major_num, "sbd");
+	if (major_num < 0) {
+		printk(KERN_WARNING "sbd: unable to get major number\n");
+		goto out;
+	}
+	/*
+	 * And the gendisk structure.
+	 */
+	Device.gd = alloc_disk(16);
+	if (!Device.gd)
+		goto out_unregister;
+	Device.gd->major = major_num;
+	Device.gd->first_minor = 0;
+	Device.gd->fops = &sbd_ops;
+	Device.gd->private_data = &Device;
+	strcpy(Device.gd->disk_name, "sbd0");
+	set_capacity(Device.gd, nsectors);
+	Device.gd->queue = Queue;
+	add_disk(Device.gd);
+
+	return 0;
+
+out_unregister:
+	unregister_blkdev(major_num, "sbd");
+out:
+	vfree(Device.data);
+	return -ENOMEM;
+}
+
+static void __exit sbd_exit(void)
+{
+	del_gendisk(Device.gd);
+	put_disk(Device.gd);
+	unregister_blkdev(major_num, "sbd");
+	blk_cleanup_queue(Queue);
+	vfree(Device.data);
+	if(cipher_handle){
+	   crypto_free_cipher(cipher_handle);
+	}
+}
+
+module_init(sbd_init);
+module_exit(sbd_exit);
